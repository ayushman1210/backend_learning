 promises are  special javascript object 
 promise object we create have 4 major properties 
 1 status 
 2 value
 3 on fullfillment 
 4 on reject


 status show current promise status 
 1 pending state 
 2 fullfilled --> success 
 3 rejected --> error 


value when status of promise is pending this value property is undefined 
the moment promise is resolved the value property is updated from undefined
 to the new value 

 so the value property acts like a placeholder till the time promises finishes 

on fullfillment this is an array which contains function that we attached 
to our promise object 
to promise object we can attachh some function using .then() method 

when the value property is updated from undefined to the new value 
js gives chance to these attachment function one by one with the value property 
as their argument (if there is no piece of code in the call stackk and gllobal code left )

to create a promise call the promise constructor 

return new Promise(function(resolve,reject){
    // sort of logics 
})

the promise constructor take as a callback as a argument 
the callback passsed inside constructor expect arguments resolve and reject

then inside callback write your logic 

if you want to return something on success then call resolve function with 
whatever value you want to return 

when we consider a promise fullfilled
if we call resolve() function we consider it as fullfilled 

we consider it as rejected if we call it as rejected()
creation of a promise is synchronous

consuming a promise 
promise consumption is main beauty using which we will avoid inversion of control 

whenever we call a func returning a promise we will get a promise object which is like a js objectthat wecan
store in a variable 

will js wait for promises to be resolved if it is involved any async piece of code 
if creation of promise involves sync code it will wait otherwise not 


we can use .then func on promise object to bind the func we want to execute once we fullfill a promise 
.then take func as argument that we want to execute after promise fullfills and the argument function takes value 
property as parameter

downloadpromise=fetchdata("www.google.com")
downloadpromise.then(function hello(value){
    console.log("hello")
    return "ayushman";
})

.then function itself return a new promise 


event loop event queue and microtasking queue 